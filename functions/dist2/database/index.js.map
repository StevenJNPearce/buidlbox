{"version":3,"sources":["../../src/database/index.js"],"names":["_","require","admin","databaseSearch","branch","boundaries","order","Promise","database","ref","join","orderByKey","pathReference","orderByChild","orderByValue","limitToFirst","limitToLast","startAt","endAt","equalTo","child","on","snapshot","dataNew","push","val","reject","Error","once","resolve","reverse","databaseRead","databaseReadSingle","databaseWrite","payload","writeType","objectReference","objectDatabaseReference","update","pointer","message","err","console","log","set","isObject","prototype","toString","obj","toArray","forEach","childSnapshot","id","key","arr","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/* ------------------------ External Dependencies ------------------------ */\nconst _ =  require('lodash');\nconst admin = require('firebase-admin');\n\n/* -------------------------------\n  Database\n--------------------------------- */\nconst databaseSearch = ({branch = [], boundaries = {}, order = {} }) => new Promise((resolve, reject) => {\n  const dataNew = []\n  let pathReference = admin.database().ref(`/${_.join(branch, '/')}`);\n\n  /*--- ref.orderByKey ---*/\n  if (order && order.orderByKey) {\n    pathReference = pathReference.orderByKey()\n  }\n\n  // ref.orderByChild()\n  if (order && order.orderByChild) {\n    pathReference = pathReference.orderByChild(order.orderByChild)\n  }\n\n  // ref.orderByValue()\n  if (order && order.orderByValue) {\n    pathReference = pathReference.orderByValue(order.orderByValue)\n  }\n\n  /*--- Boundaries ---*/\n\n  // ref.limitToFirst() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#limitToFirst\n  if (boundaries && boundaries.limitToFirst && boundaries.limitToFirst < 500) {\n    pathReference = pathReference.limitToFirst(boundaries.limitToFirst)  \n  }\n  // ref.limitToLast() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#limitToFirst\n  if (boundaries && boundaries.limitToLast && boundaries.limitToLast < 500) {\n    pathReference = pathReference.limitToLast(boundaries.limitToLast)  \n  }\n  // ref.startAt() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#limitToFirst\n  if (boundaries && boundaries.startAt) {\n    pathReference = pathReference.startAt(boundaries.startAt)  \n  }\n  // ref.endAt() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#limitToFirst\n  if (boundaries && boundaries.endAt) {\n    pathReference = pathReference.endAt(boundaries.endAt)  \n  }\n  // ref.equalTo() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#equalTo\n  if (boundaries && boundaries.equalTo) {\n    pathReference = pathReference.equalTo(boundaries.equalTo)  \n  }\n  // ref.equalTo() | https://firebase.google.com/docs/reference/js/firebase.database.ThenableReference#child\n  if (boundaries && boundaries.child) {\n    pathReference = pathReference.child(boundaries.child)  \n  }\n\n  /*--- Filter Database ---*/\n  pathReference.on('child_added', (snapshot,childKey) => {\n    return snapshot\n    ? dataNew.push(snapshot.val())\n    : reject(new Error(`Firebase Error: the admin.database.ref in databaseSearch() is originating the error.`))\n  });\n\n  /**\n   * Resolve Database Read\n   * ref.once('value', ...) is run after all ref.on('child_added', ...) events have occured.\n   * This implied request order is \"guaranteed\" by Firebase and doesn't require another request,\n   * because caching will return values to the final request to resolve the database read.\n   * \n   * Related Information - Answer by Firebase Core Developer\n   * https://stackoverflow.com/questions/27978078/how-to-separate-initial-data-load-from-incremental-children-with-firebase/27995609#27995609\n   * \n   */\n  pathReference.once('value', function(snapshot) {\n    resolve(order && order.reverse ? dataNew.reverse() : dataNew)\n  });\n\n});\n\nconst databaseRead = ({branch = [], boundaries = {}, order = {} }) => new Promise((resolve, reject) => {\n  const dataNew = []\n  let pathReference = admin.database().ref(`/${_.join(branch, '/')}`);\n\n  pathReference.once('value', function(snapshot) {\n    resolve(snapshot.val())\n  });\n\n});\nconst databaseReadSingle = ({branch = [], boundaries = {}, order = {} }) => new Promise((resolve, reject) => {\n  const dataNew = []\n  let pathReference = admin.database().ref(`/${_.join(branch, '/')}`);\n  pathReference.once('value', function(snapshot) {\n    resolve(snapshot.val())\n  });\n\n});\n\n// /**\n//  * databaseWrite \n//  * @const {String} entity \n//  * @const {Array/Object} array \n//  * @const {Object} payload \n//  * @const {Object} metdata\n//  * \n//  * @desc metadata.config\n//  *  @var writeType - [push, update, set]\n//  */\nfunction databaseWrite({ branch = [], payload = {}, writeType = 'push', boundaries = {}, order = {} }) {\n  // Validate Query\n  let pathReference = admin.database().ref(`${_.join(branch, '/')}`);\n  switch(writeType) {\n    case'push': // Push | Create a new database entry.\n      try {\n        const objectReference = pathReference.push({...payload})\n        const objectDatabaseReference = admin.database().ref(`${_.join(branch, '/') + \"/\" + objectReference }`);\n        objectDatabaseReference.update({pointer: objectReference})\n        return objectReference // Return object's unique identifier (ex: KqOZV5OSevQaZz3KcxK)\n      } catch(err) {\n        return {message: err.message}\n      }\n    break;\n    case'update': // Update | Update an existing database entry.\n      try {\n        const objectReference = pathReference.update({...payload})\n        return objectReference\n      } catch(err) {\n        console.log(err)\n        return {message: err.message}\n      }\n    break;\n    case'set': // Set \n      try {\n        const objectReference = pathReference.set({...payload})\n        // Return Promise containing void \n        return objectReference\n        } catch(err) {\n          return {message: err.message}\n        }\n      break;\n    default:\n      return {message: 'error: databaseWrite failed because writeType default is null. Please select push, update or set.'}\n\n  }\n\n}\n\n/* --------------------------- \n  Utility Functions \n--------------------------- */\nconst isObject = obj => {\n  return Object.prototype.toString(obj) === '[object Object]' ? true : false;\n};\n\nconst toArray = snapshot => {\n  let arr = [];\n  snapshot.forEach(childSnapshot => {\n    let val = childSnapshot.val();\n    if(isObject(val)){\n      val.id = childSnapshot.key;\n    }\n    arr.push(val);\n  });\n  return arr;\n};\n\n/* --------------------------- \n  Module Exports  \n--------------------------- */\nmodule.exports = {\n  databaseRead,\n  databaseReadSingle,\n  databaseSearch,\n  databaseWrite\n}\n\n\n"]}